/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/685e570735fff2860290f57d.glb 
*/

import React, { useRef, useEffect } from 'react'
import { useGraph, useFrame } from '@react-three/fiber'
import { useGLTF, useFBX, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { useControls } from 'leva'
import * as THREE from 'three'

export function Avatar(props) {
  // Recibe la animación a mostrar como prop
  const { animation } = props;

  // Controles para debug (cabeza sigue cámara, seguir cursor, wireframe)
  const { headFollow, cursorFollow, wireframe } = useControls({
    headFollow: false,
    cursorFollow: false,
    wireframe: false
  });

  // Referencia al grupo principal del avatar
  const group = useRef();

  // Carga el modelo GLTF y lo clona para poder animarlo sin modificar el original
  const { scene } = useGLTF('models/685e570735fff2860290f57d.glb');
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);

  // Carga las animaciones FBX
  const { animations: typingAnimation } = useFBX('animations/Typing.fbx');
  const { animations: standingAnimation } = useFBX('animations/Standing Idle.fbx');
  const { animations: fallingAnimation } = useFBX("animations/Falling Idle.fbx");

  // Asigna nombres a las animaciones para identificarlas fácilmente
  typingAnimation[0].name = 'Typing';
  standingAnimation[0].name = 'Standing';
  fallingAnimation[0].name = 'Falling';

  // Hook para manejar las animaciones.
  const { actions } = useAnimations([
    typingAnimation[0],
    standingAnimation[0],
    fallingAnimation[0],
    // Si quieres que funcione "Falling", añade: fallingAnimation[0],
  ], clone);

  // Actualiza la orientación de la cabeza o la columna según los controles
  useFrame((state) => {
    if (headFollow) {
      const head = clone.getObjectByName("Head");
      if (head) head.lookAt(state.camera.position);
    }
    if (cursorFollow) {
      const target = new THREE.Vector3(state.pointer.x, state.pointer.y, 1);
      const spine = clone.getObjectByName("Spine2");
      if (spine) spine.lookAt(target);
    }
  });

  // Cambia la animación activa cuando cambia la prop "animation"
  useEffect(() => {
    if (animation && actions && actions[animation]) {
      actions[animation].reset().fadeIn(0.6).play();
      return () => {
        if (actions[animation]) {
          actions[animation].reset().fadeOut(0.6).stop();
        }
      }
    }
  }, [animation, actions]);

  // Cambia el modo wireframe de todos los materiales si se activa el control
  useEffect(() => {
    Object.values(materials).forEach((material) => {
      material.wireframe = wireframe;
    });
  }, [wireframe]);

  // Renderiza el avatar
  return (
    <group {...props} ref={group} dispose={null}>
      <primitive object={clone} />
    </group>
  )
}

// Precarga el modelo GLTF para mejorar el rendimiento
useGLTF.preload('models/685e570735fff2860290f57d.glb')